#
# Application name, version and description are displayed under the management endpoint "/info".
#
# When running under IDE, spring.application.name and info.app.version will be used.
# Otherwise, the application name and version are retrieved from the packaged JAR file.
#
spring.application.name=rest-spring
info.app.version=1.0.0
info.app.description=Spring Boot with pre-configured REST serializers and exception handler
#
server.port=8083
#
# DO NOT CHANGE the URL path for static content
#
spring.mvc.static-path-pattern=/**
#
# YOU MAY UPDATE THIS AS NEEDED
#
# For embedded resources --> classpath:/public/
# For files in local file system --> file:/opt/html/
#
# Please add welcome page as "index.html"
#
spring.web.resources.static-locations=classpath:/public/
#
# The root context is used by Spring Boot's
# RequestMapping REST endpoints and static content.
#
# Therefore, JAX-RS REST endpoints must use another URL path like "/api".
# NORMALLY DO NOT CHANGE THIS unless you are using "/api" for something else
#
jax.rs.application.path=/api
#
# scan these packages for JAX-RS endpoints, WebServlet, WebFilter, WebListener, ServerEndpoint
# (use command separated list if more than one package)
#
# YOU MAY UPDATE THIS AS NEEDED
#
web.component.scan=com.accenture

#
# websocket configuration
#
#websocket.idle.timeout=60
#websocket.text.size=65536
#websocket.binary.size=65536

#
# cloud.connector = none | hazelcast | kafka | ...
# cloud.services = comma separated list of optional cloud services
#
cloud.connector=none
#cloud.services=some.other.cloud.services

#
# advanced features
#
snake.case.serialization=true
#
# health admin endpoint dependencies
#
mandatory.health.dependencies=cloud.cache.health,cloud.connector.health
#optional.health.dependencies=other.service.health

#
# You can add environment variables and application properties (comma separated list)
# for the "/env" endpoint to display
#
#show.env.variables=YOUR_ENV_VARIABLES
show.application.properties=server.port, spring.application.name, cloud.connector

#
# route substitution
#
#application.feature.route.substitution=true
# you can define a route substitution table in a yaml file
#route.substitution.file=classpath:/route-substitution.yaml
# or enter a small list in a comma separated list. The format of each entry is a:b where b replaces a
#route.substitution=hello.test:hello.world

#
# Optional redirection to index.html
#
index.redirection=/, /test
index.page=index.html

#
# HTTP Strict Transport Security (HSTS)
# (to avoid duplicated headers, disable this feature if HSTS header insertion is done external to the application.
#  e.g. API gateway)
# By default, "hsts.feature" is enabled if not configured.
#
hsts.feature=true

#
# You can shutdown, suspend or resume an application instance from a presence monitor
# to the current app instance or a remote instance
# with the exception of the "presence monitor" that can only be invoked directly.
#
# Shutdown - stop an application so that the container management system will restart it
# suspend - tell the application instance not to accept incoming requests
# resume - tell the application instance to accept incoming requests
#
# POST /shutdown
# POST /suspend/{now | later}
# POST /resume/{now | later}
#
# http header:
# X-App-Instance=origin_id_here
#
# If you set protect.info.endpoints to true, the following info endpoints
# will also be protected using the X-App-Instance HTTP request header.
#
# GET /info
# GET /info/lib
# GET /info/routes
# GET /health
# GET /env
#
# If you provide origin_id in the X-App-Instance header, you can access
# the info endpoints of an application instance from a remote instance.
#
protect.info.endpoints=false