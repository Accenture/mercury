#
# When running under IDE, this is the application name.
# Otherwise, the application name is retrieved from the packaged JAR file.
#
application.name=platform-core
#
# application working directories
# for cloud native application, you must assume the the local file system as transient.
#
application.work.location=/tmp/lambda/apps
application.identity.location=/tmp/lambda/identities
application.credentials.location=/tmp/lambda/credentials

#
# websocket configuration
#
#websocket.idle.timeout=60
#websocket.text.size=65536
#websocket.binary.size=65536

#
# for web and cloud component registration
#
#web.component.scan=org.platformlambda
#cloud.component.scan=org.platformlambda

#
# cloud.connector = event.node | hazelcast | Kafka | ...
#
#cloud.services=service.1, service.3
cloud.connector=event.node
event.node.path=ws://127.0.0.1:8080/ws/events/

#
# advanced features
#
snake.case.serialization=true
pom.properties.location=/META-INF/maven/*/*/pom.properties
#
# environment variables (comma separated list of environment variable names)
#
# When present, an environment variable will be used as a surrogate Java system property.
# For example, JAVA_HOME will be used as a shadow system property for parameter "java.home" in this property file.
#
# Each environment variable name should be in UPPER_CASE and underscore format.
# To change the mapping, use a colon to customize.
#
# In the following example,
# Environment variable PATH will override property "path.too"
#
env.variables=PATH:path.too
path.too=hello world

#
# additional security to protect against model injection to avoid a Jackson deserialization security vulnerability
# comma separated list of model packages that are considered safe to be used for object deserialization
#
# Uncomment and change it to your permitted packages
#
#safe.data.models=org.platformlambda

#
# Optional user defined "distributed trace processor"
#
# If this named service is available anywhere in the system, we will forward
# all distributed tracing information to it so that you may save it to a database
# or search engine for visualization in a UI. Alternatively, you may also reformat
# the tracing information and forward them to an external distributed tracing server
# for centralized processing.
#
distributed.trace.processor = 'distributed.trace.processor'

#
# multi-tenancy namespace (optional)
#
multi.tenancy.namespace=dev

#
# Optional application config management
# DO NOT set app.config.client=true unless you have enable the config manager in event node or presence monitor
#
app.config.client=false
#
# app.config.key is a comma separated list of key. Each key is labeled with an identifier.
# In this example, there are 2 keys. The first one is the current key.
# The remaining ones are keys from lower deployment environment or older keys
#
app.config.key=non_prod_002:get_this_from_the_environment, non_prod_001:lower_env_key
app.config.endpoint=http://127.0.0.1:8080/api/config

#
# mapping environment variables to parameters
#
#env.variables=APP_CONFIG_KEY:app.config.key,APP_CONFIG_ENDPOINT:app.config.endpoint

