#
# When running under IDE, this is the application name.
# Otherwise, the application name is retrieved from the packaged JAR file.
#
application.name=lambda-example
#
# application working directories
# for cloud native application, you must assume the the local file system as transient.
#
application.work.location=/tmp/lambda/apps

#
# scan path for MainApplication
#
web.component.scan=com.accenture

#
# websocket configuration
#
#websocket.connect.timeout=30
#websocket.idle.timeout=60
#websocket.text.size=65536
#websocket.binary.size=65536

#
# cloud.connector = none | kafka | hazelcast | activemq | tibco | ...
# cloud.services = comma separated list of optional cloud services
#
cloud.connector=none
#cloud.services=some.other.cloud.services

#
# health admin endpoint dependencies
#
mandatory.health.dependencies=cloud.connector.health
#optional.health.dependencies=other.service.health

#
# You can stop, suspend or resume an application instance from a presence monitor
# to the current app instance or a remote instance
# with the exception of the "presence monitor" that can only be invoked directly.
#
# Shutdown - stop an application so that the container management system will restart it
# suspend - tell the application instance not to accept incoming requests
# resume - tell the application instance to accept incoming requests
#
# POST /shutdown
# POST /suspend/{now | later}
# POST /resume/{now | later}
#
# http header
#
# X-App-Instance=origin_id_here
#
# Since this lambda-example app is a java main app without an application server,
# there is no admin endpoints. You can invoke the above command remotely from another application instance
# that has these admin endpoints.
#

#
# automatic logging of trace-ID (aka correlation-ID)
# (default is X-Trace-Id)
#
# Important:
# 1. If you change this header, you must update the corresponding log4j.xml's PatternLayout string
# 2. trace.log.header is case-sensitive
#
trace.log.header=X-Trace-Id

closed.user.group=1