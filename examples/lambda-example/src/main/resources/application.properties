#
# When running under IDE, this is the application name.
# Otherwise, the application name is retrieved from the packaged JAR file.
#
application.name=lambda-example
#
# application working directories
# for cloud native application, you must assume the the local file system as transient.
#
application.work.location=/tmp/lambda/apps
application.identity.location=/tmp/lambda/identities
application.credentials.location=/tmp/lambda/credentials

#
# websocket configuration
#
#websocket.connect.timeout=30
#websocket.idle.timeout=60
#websocket.text.size=65536
#websocket.binary.size=65536

#
# cloud.connector = event.node | hazelcast | kafka | ...
# cloud.services = hazelcast.reporter | kafka.reporter | ...
#
# Event Node does not need a reporter because only Hazelcast and Kafka use presence monitor technology
#
cloud.connector=event.node
cloud.services=hazelcast.reporter
presence.monitor=ws://127.0.0.1:8080/ws/presence
event.node.path=ws://127.0.0.1:8080/ws/events/

#
# Hazelcast cluster is a comma separated domain or IP address with port
#
hazelcast.cluster=127.0.0.1:5701,127.0.0.1:5702
hazelcast.namespace=connector

#
# Optional application config management
# DO NOT set app.config.client=true unless you have enable the config manager in event node or presence monitor
#
app.config.client=false
#
# app.config.key is a comma separated list of key. Each key is labeled with an identifier.
# In this example, there are 2 keys. The first one is the current key.
# The remaining ones are keys from lower deployment environment or older keys
#
app.config.key=non_prod_002:get_this_from_the_environment, non_prod_001:lower_env_key
app.config.endpoint=http://127.0.0.1:8080/api/config

#
# mapping environment variables to parameters
#
#env.variables=APP_CONFIG_KEY:app.config.key,APP_CONFIG_ENDPOINT:app.config.endpoint