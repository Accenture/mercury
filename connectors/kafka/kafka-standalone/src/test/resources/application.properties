#
# When running under IDE, this is the application name.
# Otherwise, the application name is retrieved from the packaged JAR file.
#
application.name=lambda-example
#
# application working directory
# examples:
# /tmp/lambda/apps/{app_name}/queues (where events from elastic queues are temporarily stored when overflow)
# /tmp/lambda/credentials (where public keys are stored)
#
application.work.location=/tmp/lambda/apps
#
# The identities and credentials folders are shared directories in the local file system.
# If the lambda executable is packaged as a docker image, these two folders must be
# exposed as shared resources.
# e.g.
# docker run ... -v /tmp/lambda/identities:{local_file_system_location}
# docker run ... -v /tmp/lambda/credentials:{local_file_system_location}
#
application.identity.location=/tmp/lambda/identities
application.credentials.location=/tmp/lambda/credentials

#
# websocket configuration
#
#websocket.connect.timeout=30
#websocket.idle.timeout=60
#websocket.text.size=65536
#websocket.binary.size=65536

#
# cloud.connector= event.node | message.hub
#
cloud.connector=event.node
#cloud.services=hazelcast.reporter
event.node.path=ws://127.0.0.1:8080/ws/events/

#
# Hazelcast cluster is a comma separated domain or IP address with port
#
hazelcast.cluster=127.0.0.1:5701
hazelcast.namespace=connector

#
# advanced features
#
application.feature.streaming=true
