#
# Application name, version and description are displayed under the management endpoint "/info".
#
# When running under IDE, spring.application.name and info.app.version will be used.
# Otherwise, the application name and version are retrieved from the packaged JAR file.
#
spring.application.name=presence-monitor
info.app.version=1.0.0
info.app.description=Presence Monitor
#
# Keep this default value because you can change the port
# through docker port mapping
#
server.port=8080
#
# DO NOT CHANGE the URL path for static content
#
spring.mvc.static-path-pattern=/**
#
# where to load the static files
#
# For embedded resources --> classpath:/public/
# For files in local file system --> file:/opt/html/
#
# Please add welcome page as "index.html"
#
spring.resources.static-locations=classpath:/public/
#
# The root context is used by Spring Boot's
# RequestMapping REST endpoints and static content.
#
# Therefore, JAX-RS REST endpoints must use another URL path like "/api".
# NORMALLY DO NOT CHANGE THIS unless you are using "/api" for something else
#
jax.rs.application.path=/api
#
# scan these packages for JAX-RS endpoints
# (use command separated list if more than one package)
#
web.component.scan=com.accenture
#
# application working directories
# for cloud native application, you must assume the the local file system as transient.
#
application.work.location=/tmp/lambda/apps
application.identity.location=/tmp/lambda/identities
application.credentials.location=/tmp/lambda/credentials

#
# websocket configuration
#
#websocket.connect.timeout=30
#websocket.idle.timeout=60
#websocket.text.size=65536
#websocket.binary.size=65536

#
# Kafka.properties should be externalized as a temp file
# For testing, if the file is not available, the system will resolve it from the "resources" folder in the project
#
kafka.client.properties=file:/tmp/config/kafka.properties,classpath:/kafka.properties
kafka.replication.factor=3
#
# cloud.connector is kafka for this presence monitor
#
cloud.connector=kafka

#
# for presence monitor only
#
service.monitor=true

#
# health admin endpoint dependencies
#
node.info=node.info
mandatory.health.dependencies=cloud.connector.health
#optional.health.dependencies=other.service.health

#
# default group IDs
#
default.app.group.id=appGroup
default.monitor.group.id=monitorGroup
#
# topics
#
app.topic.prefix=multiplex
app.partitions.per.topic=32
monitor.topic=service.monitor
max.virtual.topics=288
max.closed.user.groups=10
