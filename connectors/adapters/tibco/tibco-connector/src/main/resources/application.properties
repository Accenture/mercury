#
# When running under IDE, this is the application name.
# Otherwise, the application name is retrieved from the packaged JAR file.
#
spring.application.name=tibco-connector
info.app.version=1.0.0
info.app.description=Tibco Connector Library
#
# Keep this default value because you can change the port
# through docker port mapping
#
server.port=8080
#
# URL path for static content
#
spring.mvc.static-path-pattern=/**
#
# where to load the static files
#
# For embedded resources --> classpath:/public/
# For files in local file system --> file:/opt/html/
#
# Please add welcome page as "index.html"
#
spring.resources.static-locations=classpath:/public/
#
# The root context is used by Spring Boot's
# RequestMapping REST endpoints and static content.
#
# Therefore, JAX-RS REST endpoints must use another URL path like "/api".
# NORMALLY DO NOT CHANGE THIS unless you are using "/api" for something else
#
jax.rs.application.path=/api
#
# scan these packages for JAX-RS endpoints, WebServlet and Spring components
# (use command separated list if more than one package)
#
web.component.scan=com.accenture
#
# application working directories
# for cloud native application, you must assume the the local file system as transient.
#
application.work.location=/tmp/lambda/apps

#
# websocket configuration
#
#websocket.connect.timeout=30
#websocket.idle.timeout=60
#websocket.text.size=65536
#websocket.binary.size=65536

#
# health admin endpoint dependencies
#
mandatory.health.dependencies=cloud.connector.health
#optional.health.dependencies=other.health.service

cloud.connector=tibco
presence.properties=file:/tmp/config/presence.properties,classpath:/presence.properties
cloud.client.properties=file:/tmp/config/tibco.properties,classpath:/tibco.properties

#
# default group IDs
#
default.app.group.id=appGroup
#
# topics
#
monitor.topic=service.monitor
# closed.user.group number must be within max.closed.user.groups
closed.user.group=1
max.closed.user.groups=10

#
# By default, the system will create topics dynamically.
# However, some organizations do not allow user applications to create topics on-demand.
# When topics are created administratively, we must map the allocated topics to our logical topic names.
# Since an app cannot create topics, it will also avoid making admin client API to the messaging system.
#
# IMPORTANT: With pre-allocated topics, the topic mapping must be done correctly otherwise
#            the application instances will break because they will not be able to publish/subscribe
#            events to the underlying messaging system.
#
# e.g.
# service.monitor.0: system.monitor.topic.one
# multiplex.0001.0: user.app.topic.one
# multiplex.0001.1: user.app.topic.two
#
application.feature.topic.substitution=false
# you can define a topic substitution table in a yaml file
topic.substitution.file=file:/tmp/config/topic-substitution.yaml,classpath:/topic-substitution.yaml
#
# A sample topic-substitution.yaml file is available in the "test/resources" folder
#
